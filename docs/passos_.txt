Passos importantes:

* Instalar o Cookiecutter;
* Utilizar um padrão de repositório da comunidade de Data Science;
* Estruturar um projeto de Data Science e Flask;
* Criar um repositório no GitHub;
* Enviar arquivos para o GitHub.

* Criar conta no GCP;
* Criar um servidor no Google Compute Engine;
* Configurar um servidor Flask;
* Liberar regras de Firewall no Compute Engine;
* Executar uma aplicação Flask em um servidor no GCP.

* Utilizar o gcloud sdk;
* Usar arquivos yaml;
* Criar variáveis de ambiente no App Engine;
* Deploy de uma aplicação com App Engine;
* Acessar uma aplicação no App Engine.

* Criar um Dockerfile;
* Variáveis de ambiente no Docker;
* Construir containers Docker;
* Enviar imagens Docker para o Container Registry do Google;
* Executar um container Docker no Google Cloud Run.

* Utilizar o GitHub Actions;
* Criar o yaml do GitHub Actions;
* Integrar o Cloud Run ao GitHub Actions;
* Criar uma service account;
* Criar secretes no GitHub Actions;
* Ativar uma pipeline de entrega contínua.

---------------------------------------------------------------------------------------
Comandos no Linux da VM no GCP:

Primeiro instanciar a máquina no GCP
Depois liberar porta específica no firewall

- sudo apt-get update
- sudo apt-fet- install git-all
- git clone http...
- sudo apt-get install python3-pip
- pip3 install virtualenv --user
- virtualenv venv
- source venv/bin/activate
- pip3 install -r requirements.txt
- export BASIC_AUTH_USERNAME=admin
- export BASIC_AUTH_PASSWORD=senha


DOCKER:

- docker build -t ml-api --build-arg BASIC_AUTH_USERNAME_ARG=admin --build-arg BASIC_AUTH_PASSWORD_ARG=teste123 .
- docker run -p 8080:8080 ml-api

No terminal:

- gcloud auth configure-docker
- docker tag ml-api gcr.io/~nomeprojeto~/ml-api
- docker push gcr.io/~nomeprojeto~/ml-api